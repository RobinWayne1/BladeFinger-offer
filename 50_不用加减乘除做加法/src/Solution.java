/**
 * 思路:先对二进制位做加法(异或操作),后计算进位(与运算左移1位),用没算进位的结果加上进位值此时可能又会
 * 产生进位,于是继续算 没算进位的结果加上进位值的进位,如此往复直到无进位可以加,加法操作完成.
 * @author Robin
 * @date 2020/3/11 -18:02
 */
public class Solution
{
    public static int Add(int num1,int num2) {
        int add=0;
        while(num2!=0)
        {
            //异或操作则相当于各个二进制位相加,之后再做进位值与add相加的操作
            /**
             * 循环第二遍来到这里时可以看成是add+进位值,由于add+进位值可能产生进位,所以在计算add+进位值
             *  产生的进位时,用的是num1(原add)而不是相加后的add
             */
            add=num1^num2;
            /**
             * 与操作再左移1位可以算出进位,与add二进制位相加就能得到结果,注意第一次算这个进位算的是最左边的进位
             * 如101+111,(101&111)<<1 =1010,即只算了第一位二进制位的进位,第三位的还没有算,所以要循环去算
             */

            num2=(num1&num2)<<1;
            num1=add;
        }
        return add;
    }
    public static void main(String[]args)
    {
     Add(7,5);

    }
}
